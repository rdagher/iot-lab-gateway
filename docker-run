#!/usr/bin/env python

# This file is a part of IoT-LAB gateway_code
# Copyright (C) 2015 INRIA (Contact: admin@iot-lab.info)
# Contributor(s) : see AUTHORS file
#
# This software is governed by the CeCILL license under French law
# and abiding by the rules of distribution of free software.  You can  use,
# modify and/ or redistribute the software under the terms of the CeCILL
# license as circulated by CEA, CNRS and INRIA at the following URL
# http://www.cecill.info.
#
# As a counterpart to the access to the source code and  rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty  and the software's author,  the holder of the
# economic rights,  and the successive licensors  have only  limited
# liability.
#
# The fact that you are presently reading this means that you have had
# knowledge of the CeCILL license and that you accept its terms.

# Use Docker-run
# to run the docker container built by Docker-build.sh

import os
import sys

import argparse
import tempfile
from collections import namedtuple

Options = namedtuple('Options', ['volume', 'board_type', 'control_node_type', 'host'])
default = Options(None, 'm3', 'no', 'custom-123')

parser = argparse.ArgumentParser(add_help=False, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('--help', action='help')
parser.add_argument('-v', '--volume', dest='volume', help='Host directory containing gateway_code',
                    default=default.volume)
parser.add_argument('-b', '--board-type', dest='board_type', help='Set node board type', default=default.board_type)
parser.add_argument('-h', '--hostname', dest='hostname', help='Set hostname', default=default.host)
parser.add_argument('-c', '--node_type', dest='control_node_type', help='Set control_node_type', default=default.control_node_type)
parser.add_argument('-d', '--daemon', dest='daemon', action='store_true', help='Daemon mode', default=False)
parser.add_argument('-r', '--reloader', dest='reloader', action='store_true', help='Reloader', default=False)
parser.add_argument('cmd', nargs='*', help='Command to run inside the docker container')


def main(cli_args):
    args = parser.parse_args(cli_args)

    args.volume = "-v %s:/home/iot-lab-gateway/gateway_code" % os.path.abspath(args.volume) if args.volume else ''
    args.daemon = '-d' if args.daemon else '--rm'
    args.reloader = '-e RELOADER=1' if args.reloader else ''

    cmd = ' '.join(args.cmd)

    symlink_tty = '/dev/ttyON_%s' % args.board_type.upper()
    real_tty = os.path.realpath(symlink_tty)
    args.device_on_cn_tty = ' --device=%s -e ON_TTY=%s' % (real_tty, real_tty)
    if args.control_node_type != 'no':
        real_tty = os.path.realpath('/dev/ttyCN')
        args.device_on_cn_tty += ' --device=%s -e CN_TTY=%s' % (real_tty,  real_tty)

    cfg_dir = tempfile.mkdtemp()
    open(os.path.join(cfg_dir, 'board_type'), 'w').write(args.board_type)
    open(os.path.join(cfg_dir, 'control_node_type'), 'w').write(args.control_node_type)
    open(os.path.join(cfg_dir, 'hostname'), 'w').write(args.hostname)

    running = '''
    docker run \
      {0.volume} \
      -e BOARD_TYPE={0.board_type} \
      -e CONTROL_NODE_TYPE={0.control_node_type} \
      -e HOSTNAME={0.hostname} \
      -e HOST=0.0.0.0 \
      -e PORT=8080 \
      -v {2}:/var/local/config \
      {0.reloader} \
      -p 8080:8080 \
      -p 20000:20000 \
      --name "gateway_test" \
      --privileged \
      {0.device_on_cn_tty} \
      {0.daemon} \
      fitiotlab/iot-lab-gateway \
      {1}
    '''.format(args, cmd, cfg_dir)

    print('running docker command:')
    print(running)

    os.system(running)


if __name__ == '__main__':
    main(sys.argv[1:])
